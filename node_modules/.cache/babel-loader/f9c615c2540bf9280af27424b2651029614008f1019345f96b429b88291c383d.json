{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport { getPokemonData } from \"../endpoints/pokemon\";\nconst fetchPostStart = () => ({\n  type: types.FETCH_POST_START\n});\nconst fetchPostSuccess = posts => ({\n  type: types.FETCH_POST_SUCCESS,\n  payload: posts\n});\nconst fetchPostFail = error => ({\n  type: types.FETCH_POST_FAIL,\n  payload: error\n});\nexport function fetchPosts() {\n  return function (dispatch) {\n    dispatch(fetchPostStart());\n    getPokemonData({\n      0: Number,\n      1000: Number\n    }).then(response => {\n      const posts = response.data.results;\n      posts.forEach((value, idx) => {\n        posts[idx].id = idx;\n        posts[idx].isfavorite = false;\n      });\n      dispatch(fetchPostSuccess(posts));\n    }).catch(error => {\n      dispatch(fetchPostFail(error.message));\n    });\n  };\n}","map":{"version":3,"names":["types","getPokemonData","fetchPostStart","type","FETCH_POST_START","fetchPostSuccess","posts","FETCH_POST_SUCCESS","payload","fetchPostFail","error","FETCH_POST_FAIL","fetchPosts","dispatch","Number","then","response","data","results","forEach","value","idx","id","isfavorite","catch","message"],"sources":["/media/mente/F4A81F8DA81F4D8C/projects/pokemondashboard/src/redux/action.tsx"],"sourcesContent":["import axios from \"axios\";\nimport * as types from \"./actionTypes\";\nimport { getPokemonData } from \"../endpoints/pokemon\";\n\nconst fetchPostStart=()=>({\n    type: types.FETCH_POST_START,\n});\nconst fetchPostSuccess=(posts: any)=>({\n    type:types.FETCH_POST_SUCCESS,\n    payload: posts\n})\nconst fetchPostFail=(error: any)=>({\n    type: types.FETCH_POST_FAIL,\n    payload: error\n});\n\nexport function fetchPosts(){\n    return function(dispatch: any){\n        dispatch(fetchPostStart());\n        getPokemonData({0: Number,1000: Number})\n        .then((response : any)=>{\n            const posts = response.data.results;\n            posts.forEach((value: any, idx: number) => \n            {\n             posts[idx].id=idx;\n             posts[idx].isfavorite = false\n            }\n           );\n            dispatch(fetchPostSuccess(posts));\n        }).catch((error: any) => {\n            dispatch(fetchPostFail(error.message))\n        })\n    }\n}"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,eAAe;AACtC,SAASC,cAAc,QAAQ,sBAAsB;AAErD,MAAMC,cAAc,GAACA,CAAA,MAAK;EACtBC,IAAI,EAAEH,KAAK,CAACI;AAChB,CAAC,CAAC;AACF,MAAMC,gBAAgB,GAAEC,KAAU,KAAI;EAClCH,IAAI,EAACH,KAAK,CAACO,kBAAkB;EAC7BC,OAAO,EAAEF;AACb,CAAC,CAAC;AACF,MAAMG,aAAa,GAAEC,KAAU,KAAI;EAC/BP,IAAI,EAAEH,KAAK,CAACW,eAAe;EAC3BH,OAAO,EAAEE;AACb,CAAC,CAAC;AAEF,OAAO,SAASE,UAAUA,CAAA,EAAE;EACxB,OAAO,UAASC,QAAa,EAAC;IAC1BA,QAAQ,CAACX,cAAc,CAAC,CAAC,CAAC;IAC1BD,cAAc,CAAC;MAAC,CAAC,EAAEa,MAAM;MAAC,IAAI,EAAEA;IAAM,CAAC,CAAC,CACvCC,IAAI,CAAEC,QAAc,IAAG;MACpB,MAAMV,KAAK,GAAGU,QAAQ,CAACC,IAAI,CAACC,OAAO;MACnCZ,KAAK,CAACa,OAAO,CAAC,CAACC,KAAU,EAAEC,GAAW,KACtC;QACCf,KAAK,CAACe,GAAG,CAAC,CAACC,EAAE,GAACD,GAAG;QACjBf,KAAK,CAACe,GAAG,CAAC,CAACE,UAAU,GAAG,KAAK;MAC9B,CACD,CAAC;MACAV,QAAQ,CAACR,gBAAgB,CAACC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC,CAACkB,KAAK,CAAEd,KAAU,IAAK;MACrBG,QAAQ,CAACJ,aAAa,CAACC,KAAK,CAACe,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}